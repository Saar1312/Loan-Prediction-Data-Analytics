Sys.Date()
strptime(Sys.Date(), format = "%y-%m-%d")
strptime(Sys.Date(), format = "%Y-%m-%d")
x <- c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z <- strptime(x, "%d%b%Y")
z
strptime(toString(formatDate(120915)), format = "%d%m%y")
getAntiquity <- function(date)
{
difftime(strptime(Sys.Date(), format = "%Y-%m-%d"),
strptime(toString(formatDate(date)), format = "%d%m%y"),units="weeks")
}
getAntiquity(170295)
getAntiquity <- function(date)
{
difftime(strptime(Sys.Date(), format = "%Y-%m-%d"),
strptime(toString(formatDate(date)), format = "%d%m%y"),units="weeks")
}
strptime(Sys.Date(), format = "%Y-%m-%d")
strptime(toString(formatDate(170295)), format = "%d%m%y")
strptime(toString(formatDate(170295)), format = "%d%m%y")
strptime(toString(formatDate(170295)), format = "%d%m%y",tz="")
strptime(toString(formatDate(170295)), format = "%d%m%y",usetz=FALSE)
strptime(toString(formatDate(170295)), format = "%d%m%y", tz="", usetz=FALSE)
strptime(toString(formatDate(170295)), format = "%d%m%y", tz="")
strptime(Sys.Date(), format = "%Y-%m-%d", tz="CET")
# Difference in time between given date and actual date
getAntiquity <- function(date)
{
difftime(strptime(Sys.Date(), format = "%Y-%m-%d", tz="CET"),
strptime(toString(formatDate(date)), format = "%d%m%y"),units="weeks")
}
getAntiquity(170295)
# Difference in time between given date and actual date
getAntiquity <- function(date)
{
difftime(strptime(Sys.Date(), format = "%Y-%m-%d", tz="CET"),
strptime(toString(formatDate(date)), format = "%d%m%y"),units="weeks")/12
}
getAntiquity(170295)
client$age<-lapply(client$birth_number,getAntiquity)
View(client)
View(client)
lapply(c(170295,171298,102195),getAntiquity)
formatDate <- function(date)
{
if (substr(toString(date),3,4) > "12"){
return(date-5000)
} else{
return(date)
}
}
getAntiquity <- function(date)
{
difftime(strptime(Sys.Date(), format = "%Y-%m-%d", tz="CET"),
strptime(toString(formatDate(date)), format = "%d%m%y"),units="weeks")/12
}
lapply(c(170295,171298,102195),getAntiquity)
getAntiquity(102195)
getAntiquity(105095)
getAntiquity(105295)
getAntiquity(105195)
getAntiquity(105095)
getAntiquity(105195)
client$age<-lapply(client$birth_number,getAntiquity)
View(client)
View(client)
# Difference in time (weeks) between given date and actual date
getAntiquity <- function(date)
{
difftime(strptime(Sys.Date(), format = "%Y-%m-%d", tz="CET"),
strptime(toString(formatDate(date)), format = "%y%m%d"),units="weeks")/12
}
client$age<-lapply(client$birth_number,getAntiquity)
getAntiquity(785319)
getAntiquity <- function(date)
{
difftime(strptime("99-01-01", format = "%y-%m-%d", tz="CET"),
strptime(toString(formatDate(date)), format = "%y%m%d"),units="weeks")/12
}
client$age<-lapply(client$birth_number,getAntiquity)
View(client)
?difftime
ctual date
getAntiquity <- function(date)
{
difftime(strptime(Sys.Date(), format = "%Y-%m-%d"),
strptime(toString(formatDate(date)), format = "%y%m%d"),units="weeks")/12
}
getAntiquity <- function(date)
{
difftime(strptime(Sys.Date(), format = "%Y-%m-%d"),
strptime(toString(formatDate(date)), format = "%y%m%d"),units="weeks")/12
}
getAntiquity(161129)
getAntiquity(161120)
getAntiquity(001120)
getAntiquity(011120)
getAntiquity(101120)
getAntiquity(151120)
getAntiquity <- function(date)
{
difftime(strptime(Sys.Date(), format = "%Y-%m-%d", tz="CET"),
strptime(toString(formatDate(date)), format = "%y%m%d"),units="weeks")/12
}
getAntiquity(151120)
getAntiquity(151120)
getAntiquity <- function(date)
{
difftime(strptime(Sys.Date(), format = "%Y-%m-%d"),
strptime(toString(formatDate(date)), format = "%y%m%d"),units="years")
}
getAntiquity(151120)
getAntiquity <- function(date)
{
difftime(strptime(Sys.Date(), format = "%Y-%m-%d"),
strptime(toString(formatDate(date)), format = "%y%m%d"),units="weeks")/52.25
}
getAntiquity(151120)
getAntiquity(021120)
getAntiquity(171120)
getAntiquity(941120)
min(client$birth_number)
getAntiquity(110820)
max(client$birth_number)
max(card$issued)
max(card_train$issued)
max(client$birth_number,card_train$issued)
mix(client$birth_number,card_train$issued)
min(client$birth_number,card_train$issued)
min(client$birth_number)
min(card_train$issued)
max(client$birth_number,card_train$issued,card_test$issued,account_date$date,trans_train$date,trans_test$date,loan_test$date,loan_train$date)
?lapply
# Difference in time (weeks) between given date and reference date
getAntiquity <- function(date)
{
difftime(strptime(toString(refDate), format = "%y-%m-%d"),
strptime(toString(formatDate(date)), format = "%y%m%d"),units="weeks")/52.25
}
refDate <- (client$birth_number,card_train$issued,card_test$issued,account_date$date,
trans_train$date,trans_test$date,loan_test$date,loan_train$date)
refDate <- max(client$birth_number,card_train$issued,card_test$issued,account_date$date,
trans_train$date,trans_test$date,loan_test$date,loan_train$date)
refDate <- max(client$birth_number,card_train$issued,card_test$issued,account$date,
trans_train$date,trans_test$date,loan_test$date,loan_train$date)
refDate
getAntiquity(981208)
getAntiquity(981202)
refDate
getAntiquity <- function(date)
{
difftime(strptime(toString(refDate), format = "%y-%m-%d"),
strptime(toString(formatDate(date)), format = "%y%m%d"),units="weeks")/52.25
}
getAntiquity(981202)
getAntiquity(901202)
getAntiquity <- function(date, refDate)
{
difftime(strptime(toString(refDate), format = "%y-%m-%d"),
strptime(toString(formatDate(date)), format = "%y%m%d"),units="weeks")/52.25
}
refDate <- max(client$birth_number,card_train$issued,card_test$issued,account$date,
trans_train$date,trans_test$date,loan_test$date,loan_train$date)
client$age<-lapply(client$birth_number,getAntiquity,arg1=refDate)
client$age<-mapply(getAntiquity,client$birth_number,arg1=refDate)
client$age<-mapply(getAntiquity,client$birth_number)
client$age<-mapply(getAntiquity,refDate,client$birth_number)
View(client)
getAntiquity <- function(date, refDate)
{
difftime(strptime(toString(refDate), format = "%y%m%d"),
strptime(toString(formatDate(date)), format = "%y%m%d"),units="weeks")/52.25
}
client$age<-mapply(getAntiquity,refDate,client$birth_number)
View(client)
strptime(toString(refDate), format = "%y%m%d")
strptime(toString(formatDate(date))
strptime(toString(formatDate(date)), format = "%y%m%d")
strptime(toString(formatDate(385221)), format = "%y%m%d")
strptime(paste("19",toString(formatDate(385221))), format = "%Y%m%d")
strptime(paste("19",toString(formatDate(385221)), format = "%Y%m%d")
)
paste("19",toString(formatDate(385221)))
?paste
paste("19",toString(formatDate(385221)),sep="")
getAntiquity <- function(date, refDate)
{
difftime(paste("19",strptime(toString(refDate),sep=""), format = "%Y%m%d"),
strptime(toString(formatDate(date)), format = "%y%m%d"),units="weeks")/52.25
}
getAntiquity(901202)
getAntiquity <- function(date, refDate)
{
difftime(paste("19",strptime(toString(refDate)),sep=""), format = "%Y%m%d"),
strptime(toString(formatDate(date)), format = "%y%m%d"),units="weeks")/52.25
}
getAntiquity <- function(date, refDate)
{
difftime(strptime(paste("19",toString(refDate),sep=""), format = "%Y%m%d"),
strptime(toString(formatDate(date)), format = "%y%m%d"),units="weeks")/52.25
}
getAntiquity(901202)
getAntiquity(901202,refDate)
refDate
client$age<-mapply(getAntiquity,refDate,client$birth_number)
View(client)
getAntiquity(706213)
getAntiquity(706213,refDate)
# Disabling scientific notation
options(scipen=999)
# Loading data
loadData <- function(tables, path, empty_values)
{
files <- paste(path, tables, ".csv",sep="")
for (f in files){
read.csv(f, sep=";", na.strings=empty_values)
}
}
countNa <- function(df)
{
for(col in names(df)){
cat(col," ",sum(is.na(df[[col]])),"\n")
}
}
checkNa <- function(frames)
{
for(f in frames){
countNa(f)
cat("#################################\n")
}
}
# Takes out the +50 months if date is the birthday of a female client
formatDate <- function(date)
{
if (substr(toString(date),3,4) > "12"){
return(date-5000)
}
}
getGender <- function(date)
{
if (substr(toString(date),3,4) <= "12"){
return("Hombre")
} else {
return("Mujer")
}
}
# Difference in time (weeks) between given date and reference date
getAntiquity <- function(date, refDate)
{
difftime(strptime(paste("19",toString(refDate),sep=""), format = "%Y%m%d"),
strptime(toString(formatDate(date)), format = "%y%m%d"),units="weeks")/52.25
}
# Esto es para ver los outliers de las columnas numericas importantes
# Probar al final el modelo entrenado con y sin outliers
#boxplot(district[,4:16])
#boxplot(loan_train$amount)
dframes <- list(account,card_test,card_train,client,disp,
district,loan_test,loan_train,trans_test,trans_train)
# Max date on client$birth_number, card$issued to avoid considering dates like 11-01-01 as 2011-01-01 but 1911-01-01
# because data is older than
refDate <- max(client$birth_number,card_train$issued,card_test$issued,account$date,
trans_train$date,trans_test$date,loan_test$date,loan_train$date)
loadData(c("account", "card_test", "card_train", "client", "disp", "district", "loan_test",
"loan_train", "trans_test", "trans_train"), c("~/Mineria/Data/") ,c(""," ","NA","?"))
# Checking number of NA field for each table
checkNa(dframes)
client$gender<-lapply(client$birth_number,getGender)
client$age<-mapply(getAntiquity,refDate,client$birth_number)
View(client)
mapply(getAntiquity,refDate,client$birth_number)
getAntiquity(client$birth_number,refDate)
getAntiquity(client$birth_number[1],refDate)
getAntiquity(client$birth_number[2],refDate)
client$birth_number[2]
getAntiquity(450204,refDate)
refDate
strptime(paste("19",toString(refDate),sep=""), format = "%Y%m%d")
strptime(toString(formatDate(date)), format = "%y%m%d")
strptime(toString(formatDate(450204)), format = "%y%m%d")
getAntiquity <- function(date, refDate)
{
difftime(strptime(toString(refDate), format = "%Y%m%d"),
strptime(paste("19",toString(formatDate(date)),sep=""), format = "%y%m%d"),units="weeks")/52.25
}
getAntiquity <- function(date, refDate)
{
difftime(strptime(toString(refDate), format = "%y%m%d"),
strptime(paste("19",toString(formatDate(date)),sep=""), format = "%Y%m%d"),units="weeks")/52.25
}
getAntiquity(450204,refDate)
strptime(paste("19",toString(formatDate(date)),sep=""), format = "%Y%m%d")
strptime(paste("19",toString(formatDate(450204)),sep=""), format = "%Y%m%d")
formatDate(450204)
formatDate <- function(date)
{
if (substr(toString(date),3,4) > "12"){
return(date-5000)
} else {
return(date)
}
}
getAntiquity(450204,refDate)
client$age<-mapply(getAntiquity,refDate,client$birth_number)
View(client)
getAntiquity(706213,refDate)
# Disabling scientific notation
options(scipen=999)
# Loading data
loadData <- function(tables, path, empty_values)
{
files <- paste(path, tables, ".csv",sep="")
for (f in files){
read.csv(f, sep=";", na.strings=empty_values)
}
}
countNa <- function(df)
{
for(col in names(df)){
cat(col," ",sum(is.na(df[[col]])),"\n")
}
}
checkNa <- function(frames)
{
for(f in frames){
countNa(f)
cat("#################################\n")
}
}
# Takes out the +50 months if date is the birthday of a female client
formatDate <- function(date)
{
if (substr(toString(date),3,4) > "12"){
return(date-5000)
} else {
return(date)
}
}
getGender <- function(date)
{
if (substr(toString(date),3,4) <= "12"){
return("Hombre")
} else {
return("Mujer")
}
}
# Difference in time (weeks) between given date and reference date
getAntiquity <- function(date, refDate)
{
difftime(strptime(toString(refDate), format = "%y%m%d"),
strptime(paste("19",toString(formatDate(date)),sep=""), format = "%Y%m%d"),units="weeks")/52.25
}
# Esto es para ver los outliers de las columnas numericas importantes
# Probar al final el modelo entrenado con y sin outliers
#boxplot(district[,4:16])
#boxplot(loan_train$amount)
dframes <- list(account,card_test,card_train,client,disp,
district,loan_test,loan_train,trans_test,trans_train)
# Max date on client$birth_number, card$issued to avoid considering dates like 11-01-01 as 2011-01-01 but 1911-01-01
# because data is older than
refDate <- max(client$birth_number,card_train$issued,card_test$issued,account$date,
trans_train$date,trans_test$date,loan_test$date,loan_train$date)
loadData(c("account", "card_test", "card_train", "client", "disp", "district", "loan_test",
"loan_train", "trans_test", "trans_train"), c("~/Mineria/Data/") ,c(""," ","NA","?"))
# Checking number of NA field for each table
checkNa(dframes)
client$gender<-lapply(client$birth_number,getGender)
client$age<-mapply(getAntiquity,refDate,client$birth_number)
# antiguedad de tarjetas
# antiguedad de cuenta
# edad de usuario
# tiempo del prestamo por terminar
# para que es fecha de transaccion?
View(client)
strptime(toString(refDate), format = "%y%m%d")
strptime(paste("19",toString(formatDate(date)),sep=""), format = "%Y%m%d")
strptime(paste("19",toString(formatDate(706213)),sep=""), format = "%Y%m%d")
difftime(strptime(toString(refDate), format = "%y%m%d"),
strptime(paste("19",toString(formatDate(706213)),sep=""), format = "%Y%m%d"),units="weeks")/52.25
difftime(strptime(toString(refDate), format = "%y%m%d"),
strptime(paste("19",toString(formatDate(810220)),sep=""), format = "%Y%m%d"),units="weeks")/52.25
mapply(getAntiquity,refDate,c(706213,450204,406009,561201))
getAntiquity <- function(date, refDate)
{
return(difftime(strptime(toString(refDate), format = "%y%m%d"),
strptime(paste("19",toString(formatDate(date)),sep=""), format = "%Y%m%d"),units="weeks")/52.25)
}
mapply(getAntiquity,refDate,c(706213,450204,406009,561201))
lapply(refDate,getAntiquity,c(706213,450204,406009,561201))
lapply(refDate,getAntiquity,arg1=c(706213,450204,406009,561201))
?lapply
lapply(refDate,getAntiquity,arg1=c(450204,706213,406009,561201))
mapply(getAntiquity,refDate,c(450204,706213,406009,561201))
getAntiquity(706213,refDate)
lapply(c(450204,706213,406009,561201),getAntiquity,refDate)
client$age<-lapply(client$birth_number,getAntiquity,refDate)
View(client)
boxplot(age~gender,data=client)
attach(client)
boxplot(age~gender,data=client)
boxplot(age,data=client)
boxplot(age,data=client)
boxplot(birth_number,data=client)
typeof(client$client_id)
typeof(client$gender)
?cbind
client<-cbind(client,gender=lapply(client$birth_number,getGender))
client<-cbind(client,age=lapply(client$birth_number,getAntiquity,refDate))
client<-cbind(client,gender=lapply(client$birth_number,getGender))
cbind(client,gender=lapply(client$birth_number,getGender))
lapply(client$birth_number,getGender)
typeof(lapply(client$birth_number,getGender))
typeof(c(1,2,3))
client$gender<-unlist(lapply(client$birth_number,getGender))
client$age<-unlist(lapply(client$birth_number,getAntiquity,refDate))
typeof(client$age)
boxplot(age~gender,data=client)
z<-list("1",2)
z
c("1",2)
c("1",c(2))
client <- read.csv("~/Mineria/Data/client.csv", sep=";")
View(client)
client$gender<-unlist(lapply(client$birth_number,getGender))
View(client)
client$age<-unlist(lapply(client$birth_number,getAntiquity,refDate))
View(client)
m = merge(disp, client, by="client_id")
m
m1 = mergeTables(disp[,c("client_id","account_id")], client[,c("client_id","gender","age")],"client_id")
m2 = mergeTables(m1,loan_train[,c("account_id","status")],"account_id")
mergeTables <- function(df1,df2,colName)
{
merge(df1,df2,by=colName)
}
m1 = mergeTables(disp[,c("client_id","account_id")], client[,c("client_id","gender","age")],"client_id")
m2 = mergeTables(m1,loan_train[,c("account_id","status")],"account_id")
m2
boxplot(age~status,data=m)
head(m2)
boxplot(age~status,data=m2)
dim(m2)
dim(client)
dim(m1)
dim(account)
write.csv(m1,file="disp_client.csv")
write.csv(m2,file="disp_client_loan.csv")
getwd()
setwd("/home/samuel/Data")
setwd("/home/samuel/Mineria/Data")
write.csv(m1,file="disp_client.csv")
write.csv(m2,file="disp_client_loan.csv")
head(m2)
head(m2[m2$gender=="Mujer"])
head(m2[m2$gender=="Mujer"])
head(m2[m2$gender="Mujer"])
head(m2[m2$age>40])
head(m2[m2$age])
head(m2[age>20])
head(m2[age>20])
typeof(m2)
unlist(m2)
dim(unlist(m2))
length(unlist(m2))
dim(m2)
403*5
m2[1]
typeof(m2[1])
?merge
m1 = unlist(mergeTables(disp[,c("client_id","account_id")], client[,c("client_id","gender","age")],"client_id"))
typeof(m1)
m2 = unlist(mergeTables(m1,loan_train[,c("account_id","status")],"account_id"))
typeof(account)
typeof(clinet)
typeof(client)
students <- data.frame(name=c('Mário', 'Lúcio', 'Amaro'),
course=c('CEI', 'CEI', 'CEI'), SI=c(15,17,17),
EG=c(16,15,18), AD=c(15,16,12), IA=c(17,14,12))
typeof(students)
m1 = mergeTables(disp[,c("client_id","account_id")], client[,c("client_id","gender","age")],"client_id")
write.csv(m1,file="disp_client.csv")
m2 = mergeTables(m1,loan_train[,c("account_id","status")],"account_id")
write.csv(m2,file="disp_client_loan.csv")
boxplot(age~status,data=m2)
m2[m2$gender == "Hombre"]
m2[m2[gender == "Hombre"]]
m2[m2$gender == "Hombre",]
boxplot(age~status,data=m2[m2$gender == "Hombre",])
boxplot(age~status,data=m2[m2$gender == "Mujer",])
barplot(age~status,data=m2[m2$gender == "Hombre",])
barplot(m2[m2$gender == "Hombre",][,c("gender","status")])
m2[m2$gender == "Hombre",][,c("gender","status")]
barplot(m2[m2$gender == "Hombre",][,c("gender","status")])
barplot(m2$status,m2$gender, xlab="Status", ylab="Gender")
barplot(m2$status)
barplot(m2$gender)
table(m2$gender,m2$status)
a<-table(m2$gender,m2$status)
a
barplot(a)
c1 <- table(m2$gender,m2$status)
# Barplot gender vs status
barplot(c1,
main = "Gender-Status frequencies",
)
legend("topleft",
c("Male","Female"),
fill = c("red","green")
)
barplot(c1,
main = "Gender-Status frequencies",
)
